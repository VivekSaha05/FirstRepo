**GIT AND GITHUB**
Introduction
What is Git ?
Configuring Name & Email in Git
init command
Untracked & Staged File
git checkout command
git log command
git diff command
Removing file (rm command)
37:38 – git ignore command
46:00 – Branches
58:10 – GitHub
01:02:07 – Remote Repository
01:07:18 – git push command
01:11:37 – git clone 
01:14:01 – Cheat sheet
01:14:32 – Courses Detail

>What is git ?
 Git is software for tracking changes in any set of files,
 usually used for coordinating work among programmers 
 collaboratively developing source code during software 
 development. Its goals include speed, data integrity, 
 and support for distributed, non-linear workflows.

>Difference btw git and github ?
 what's the difference? Simply put, 
 Git is a version control system that 
 lets you manage and keep track of your 
 source code history. GitHub is a 
 cloud-based hosting service that 
 lets you manage Git repositories.
 If you have open-source projects 
 that use Git, then GitHub is designed 
 to help you better manage them.

>What is repositories and why it used?
 A repository is usually used to organize
 a single project. Repositories can contain
 folders and files, images, videos, spreadsheets,
 and data sets -- anything your project needs.
 Often, repositories include a README file, a
 file with information about your project.
 README files are written in the plain text Markdown language.

# Git software hai and github aak cloud based data storing service hai
# git is like chrome and github chrome history
# it stores every changes in code for future references
# git se github mai file upload/update/commit hota hai
# git bash terminal se sab run kiya jayega

> How to add name and email
$ git config --global user.name {name}
$ git config --global user.email {email}

>To Initialise a Repo/project 
$ git init

>To see all files in that folder including hidden files
$ ls -lart

>To see status about files
$ git status

>To forward the file to staging area
$ git add {filename.html} 

>To save/commit the staged file
$ git commit

>To create a blank file
$ touch {filename.html}

>To add all files at once in stageing area 
$ git add -A

>To commit it easily without opening new tab of commit edit
$ git commit -m "added more htmls"

>To get back to your previous code without modification (previous commited code)
$ git checkout {filename.html}

>To get back all files without modification (previous commited code)
$ git checkout -f

>log used to know what we commited before (history)
$ git log  [press Q to quit]

>to see specific part of the last log
$ git log -p -1 [-1 represents previous last commit, we can see any]

>To see difference btw working/commited area to stage area
$ git diff

>To see differencebtw stage area to last working/commited area
$ git diff --staged

>Direct commit and skiped staging area and fixed [without doing add -A]
$ git commit -a -m "{msg}"

>Remove file completely
$ git rm {filename.html}

>Remove file from staging area but will be stored on untracked
 files. can be bringed back by add -A.
$ git rm --cached {filename.html}

>To forcely delete the file from staged area
$ git rm -f {filename.html}

>To see which file is modified
$ git status -sab

>to create a git ignore file [just write name of the file]
$ touch .gitignore

>Git ignore some commands
mylog.log [remove all file having same name in that folder]
/mylog.log [remove that particular log file]
*.log , *.cpp , *.html [ignore all the files having this extension]
foldername/ [to ignore that folder in the repo]
 
>To open a new branch [used to separate master/original branch and create its duplicate copy]
$ git branch {name of new branch}

>To change/switch the branch
$ git checkout {name of the branch}

>To merge master branch with duplicate branch
$ git merge {name of the duplicate branch}

>To open a new branch and enter it directly without checkout
$ git checkout -b {name of the new brnach}

*file made in any specific branch doesnt show on another branch*
